#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 770)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'247,248,69,235,82,85,310,151,223,82,85,192,213,181,185,40,341,216,-154',
'119,165,221,176,178,182,184,15,82,85,220,224,225,153,82,85,224,225,105',
'164,108,73,143,190,66,241,177,180,190,69,187,170,171,172,174,175,103',
'179,183,337,348,79,336,72,173,94,257,79,349,74,315,94,97,202,58,74,59',
'98,304,86,104,82,85,98,130,105,101,73,72,55,66,305,130,235,72,129,130',
'40,82,85,134,41,105,129,108,-173,164,129,134,72,229,245,134,56,79,82',
'85,317,94,97,103,264,74,40,246,239,86,119,229,230,98,79,213,69,15,94',
'97,216,149,74,322,72,333,86,104,82,85,98,79,105,101,108,94,257,130,40',
'74,58,72,41,202,-160,82,85,98,129,105,103,108,40,134,73,326,41,66,72',
'318,54,79,82,85,328,94,97,103,258,74,164,82,85,86,104,105,72,98,79,-158',
'101,227,94,97,224,225,74,-156,72,332,86,104,82,85,98,79,105,101,108',
'94,257,-153,40,74,79,72,41,202,94,97,159,98,74,15,103,160,86,82,85,307',
'98,105,72,108,306,79,54,179,183,94,97,72,303,74,173,52,53,86,104,103',
'302,98,82,85,101,161,105,-157,108,295,79,59,72,150,94,97,268,149,74',
'114,229,262,86,104,103,143,98,82,85,101,-155,105,138,108,335,79,160',
'72,-156,94,97,263,293,74,233,229,262,86,104,103,342,98,82,85,101,143',
'105,344,108,-154,79,-153,72,289,94,97,231,350,74,-159,229,230,86,104',
'103,-107,98,82,85,101,291,93,-155,290,114,79,112,72,72,94,97,334,110',
'74,356,229,230,86,104,84,37,98,82,85,101,62,105,61,108,212,79,359,72',
'337,94,97,336,72,74,82,85,165,86,105,103,108,98,179,183,149,-107,-107',
'-107,-107,173,79,233,72,366,94,97,103,51,74,229,361,233,86,104,235,369',
'98,79,49,101,237,94,97,370,43,74,-207,72,372,86,104,82,85,98,239,105',
'101,108,243,37,378,82,85,379,72,105,,108,,,,82,85,103,,105,,108,47,48',
'44,45,,103,79,,,,94,97,,,74,103,79,,86,104,94,97,98,,74,101,79,,86,104',
'94,97,98,72,74,101,,,86,104,82,85,98,72,105,101,108,,,,82,85,,72,105',
',108,,,,82,85,103,47,48,44,45,347,187,170,171,172,103,79,,179,183,94',
'97,,,74,173,79,,86,104,94,97,98,,74,101,79,,86,104,94,257,98,72,74,101',
',,202,,82,85,98,72,105,,108,,,,82,85,,72,105,,108,,,,82,85,103,,105',
',108,-25,-25,-25,-25,,103,79,,,,94,97,,,74,103,79,,86,104,94,97,98,',
'74,101,79,,86,104,94,97,98,72,74,101,,,86,104,82,85,98,72,105,101,108',
',,,82,85,,72,105,-23,-23,-23,-23,,82,85,103,,105,,108,,,,,,,79,,,,94',
'97,,,74,103,79,,86,104,94,257,98,,74,101,79,,202,,94,97,98,72,74,,,',
'86,104,82,85,98,72,105,101,108,,,,82,85,,72,105,,108,187,170,171,172',
',103,,179,183,,,,,,173,103,79,,,,94,97,,,74,,79,,86,104,94,97,98,,74',
'101,219,,86,104,,,98,72,,101,181,185,,,,,,72,,176,178,182,184,171,172',
',,,179,183,82,85,171,172,105,173,108,179,183,,,,177,180,173,,187,170',
'171,172,174,175,103,179,183,82,85,,,105,173,108,,79,,,,94,97,,,74,,',
',86,104,103,,98,82,85,101,,105,,108,,79,,72,,94,97,,,74,,,,86,104,103',
',98,82,85,101,,105,,108,,79,,72,,94,97,,,74,,,,86,104,103,,98,82,85',
'101,,105,,,,79,,72,,94,97,,,74,,,,86,104,,,98,82,85,101,,105,,108,,79',
',72,,94,207,,,74,,,,202,,103,,98,,,,,,,,,79,,72,,94,97,82,85,74,,331',
',86,104,,,98,,,101,181,185,,,,,,72,,176,178,182,184,,,,,,,79,,,,94,257',
',,74,,,,202,177,180,,98,187,170,171,172,174,175,,179,183,,72,82,85,',
'173,105,,108,,,,82,85,,,105,163,108,,,,82,85,103,,105,,108,,,,,,103',
'79,,,,94,97,,,74,103,79,,86,104,94,97,98,,74,101,79,,86,104,94,97,98',
'72,74,101,,,86,104,82,85,98,72,105,101,108,,,,82,85,,72,105,,108,,,',
'82,85,103,155,105,,108,,,,,,103,79,,,,94,97,,,74,103,79,,86,104,94,97',
'98,,74,101,79,,86,104,94,97,98,72,74,101,,,86,104,82,85,98,72,105,101',
'108,,,,82,85,,72,105,,108,,,,82,85,103,,105,,108,,,,,,103,79,,,,94,97',
',,74,103,79,,86,104,94,97,98,,74,101,79,,86,104,94,97,98,72,74,101,',
',86,104,82,85,98,72,105,101,108,,,,82,85,,72,105,163,108,,,,82,85,103',
',,,,,,,,,103,79,,,,94,97,,,74,,79,,86,104,94,97,98,,74,101,79,,86,104',
'94,257,98,72,74,101,,,202,,82,85,98,72,105,,108,,,,82,85,,72,105,,108',
',,,82,85,103,,105,,108,,,,,,103,79,,,,94,97,,,74,103,79,,86,104,94,97',
'98,,74,101,79,,86,104,94,97,98,72,74,101,,,86,104,82,85,98,72,105,101',
'108,,,186,,,,72,,,,,181,185,,,103,,,,,176,178,182,184,,,79,,,,94,97',
',,74,,,,86,104,,,98,177,180,101,,187,170,171,172,174,175,72,179,183',
'210,,,,,173,,,,181,185,,,,,,,,176,178,182,184,,,181,185,,,,,,,218,176',
'178,182,184,,,,,177,180,,,187,170,171,172,174,175,,179,183,,,177,180',
',173,187,170,171,172,174,175,,179,183,181,185,,,,173,,,,176,178,182',
'184,,,181,185,,,,,,,,176,178,182,184,,,,,177,180,,,187,170,171,172,174',
'175,,179,183,,,,180,,173,187,170,171,172,174,175,,179,183,181,185,,',
',173,,,,176,178,182,184,,,181,185,,,,,,,,176,178,182,184,,,,,177,180',
',,187,170,171,172,174,175,,179,183,,,177,180,,173,187,170,171,172,174',
'175,,179,183,181,185,,,,173,,,,176,178,182,184,,,181,185,,,,,,,,176',
'178,182,184,,,,,,,,,187,170,171,172,174,175,,179,183,,,177,180,,173',
'187,170,171,172,174,175,,179,183,181,185,,,,173,,,,176,178,182,184,',
',181,185,,,,,,,,176,178,182,184,,,,,177,180,,,187,170,171,172,174,175',
',179,183,,,177,180,,173,187,170,171,172,174,175,,179,183,181,185,,,',
'173,,,,176,178,182,184,,,181,185,,,,,,,,176,178,182,184,,,,,177,180',
',,187,170,171,172,174,175,,179,183,,,,,,173,187,170,171,172,174,175',
',179,183,181,185,,,,173,,,,176,178,182,184,,,181,185,,,,,,,,176,178',
'182,184,,,,,177,180,,,187,170,171,172,174,175,,179,183,,,177,180,,173',
'187,170,171,172,174,175,,179,183,181,185,,,,173,,,267,176,178,182,184',
',,181,185,,,,,,,,176,178,182,184,,,,,177,180,,,187,170,171,172,174,175',
',179,183,,,,,,173,187,170,171,172,174,175,,179,183,181,185,,,,173,,',
',176,178,182,184,,,,185,,,,,,,,176,,,,,,,,177,180,185,,187,170,171,172',
'174,175,176,179,183,,,,,185,173,187,170,171,172,174,175,176,179,183',
',,,,,173,,185,,187,170,171,172,174,175,176,179,183,,,,,,173,187,170',
'171,172,174,175,8,179,183,,,,,,173,,,,187,170,171,172,174,175,8,179',
'183,,,,,,173,,,30,,1,4,,12,16,8,23,,28,,34,,5,358,,15,30,,1,4,,12,16',
'8,23,,28,,34,,5,287,,15,30,,1,4,,12,16,8,23,,28,,34,,5,325,,15,30,,1',
'4,,12,16,8,23,,28,,34,,5,301,,15,30,,1,4,,12,16,8,23,,28,,34,,5,371',
',15,30,,1,4,,12,16,8,23,,28,,34,,5,375,,15,30,,1,4,,12,16,8,23,,28,',
'34,,5,377,,15,30,,1,4,,12,16,8,23,,28,,34,,5,,,15,30,,1,4,,12,16,8,23',
',28,,34,,5,355,,15,30,,1,4,,12,16,,23,,28,,34,,5,,,15,30,,1,4,,12,16',
',23,,28,,34,,5,,,15,187,170,171,172,174,175,,179,183,,,,,,173,187,170',
'171,172,174,175,,179,183,,,,,,173' ]
        racc_action_table = arr = Array.new(2232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'158,158,153,149,108,108,222,68,133,290,290,108,304,158,158,50,290,304',
'77,50,97,128,158,158,158,158,50,363,363,128,222,222,68,160,160,133,133',
'160,97,160,153,233,108,153,149,158,158,290,151,158,158,158,158,158,158',
'160,158,158,287,298,363,287,153,158,363,363,160,298,363,234,160,160',
'363,13,160,13,363,215,160,160,161,161,160,55,161,160,151,363,13,151',
'215,226,207,160,55,130,16,164,164,55,16,164,226,164,86,207,130,226,151',
'156,156,130,13,161,348,348,236,161,161,164,164,161,46,156,228,161,46',
'265,265,161,164,114,23,46,164,164,114,239,164,240,161,265,164,164,165',
'165,164,348,165,164,165,348,348,56,4,348,81,164,4,348,80,336,336,348',
'56,336,165,336,237,56,23,245,237,23,348,237,79,165,159,159,254,165,165',
'336,159,165,257,328,328,165,165,328,23,165,336,78,165,137,336,336,137',
'137,336,88,165,262,336,336,170,170,336,159,170,336,170,159,159,75,20',
'159,328,336,20,159,328,328,89,159,328,20,170,91,328,171,171,218,328',
'171,159,171,216,170,12,270,270,170,170,328,214,170,270,12,12,170,170',
'171,213,170,172,172,170,92,172,95,172,209,171,63,170,62,171,171,169',
'61,171,60,169,169,171,171,172,59,171,173,173,171,208,173,57,173,286',
'172,204,171,201,172,172,162,199,172,197,162,162,172,172,173,292,172',
'174,174,172,293,174,294,174,195,173,194,172,189,173,173,139,300,173',
'99,139,139,173,173,174,263,173,28,28,173,193,28,100,193,42,174,39,173',
'183,174,174,266,31,174,312,266,266,174,174,28,112,174,30,30,174,19,30',
'17,30,113,28,324,174,335,28,28,335,179,28,175,175,119,28,175,30,175',
'28,271,271,138,263,263,263,263,271,30,141,28,337,30,30,175,11,30,330',
'330,343,30,30,143,349,30,175,8,30,144,175,175,354,5,175,361,30,362,175',
'175,176,176,175,146,176,175,176,152,1,374,34,34,376,175,34,,34,,,,306',
'306,176,,306,,306,6,6,6,6,,34,176,,,,176,176,,,176,306,34,,176,176,34',
'34,176,,34,176,306,,34,34,306,306,34,176,306,34,,,306,306,302,302,306',
'34,302,306,302,,,,49,49,,306,49,,49,,,,296,296,302,9,9,9,9,296,273,273',
'273,273,49,302,,273,273,302,302,,,302,273,49,,302,302,49,49,302,,49',
'302,296,,49,49,296,296,49,302,296,49,,,296,,51,51,296,49,51,,51,,,,52',
'52,,296,52,,52,,,,53,53,51,,53,,53,3,3,3,3,,52,51,,,,51,51,,,51,53,52',
',51,51,52,52,51,,52,51,53,,52,52,53,53,52,51,53,52,,,53,53,54,54,53',
'52,54,53,54,,,,295,295,,53,295,33,33,33,33,,289,289,54,,289,,289,,,',
',,,54,,,,54,54,,,54,289,295,,54,54,295,295,54,,295,54,289,,295,,289',
'289,295,54,289,,,,289,289,177,177,289,295,177,289,177,,,,58,58,,289',
'58,,58,274,274,274,274,,177,,274,274,,,,,,274,58,177,,,,177,177,,,177',
',58,,177,177,58,58,177,,58,177,126,,58,58,,,58,177,,58,126,126,,,,,',
'58,,126,126,126,126,269,269,,,,269,269,178,178,288,288,178,269,178,288',
'288,,,,126,126,288,,126,126,126,126,126,126,178,126,126,101,101,,,101',
'126,101,,178,,,,178,178,,,178,,,,178,178,101,,178,181,181,178,,181,',
'181,,101,,178,,101,101,,,101,,,,101,101,181,,101,182,182,101,,182,,182',
',181,,101,,181,181,,,181,,,,181,181,182,,181,110,110,181,,110,,,,182',
',181,,182,182,,,182,,,,182,182,,,182,184,184,182,,184,,184,,110,,182',
',110,110,,,110,,,,110,,184,,110,,,,,,,,,184,,110,,184,184,258,258,184',
',260,,184,184,,,184,,,184,260,260,,,,,,184,,260,260,260,260,,,,,,,258',
',,,258,258,,,258,,,,258,260,260,,258,260,260,260,260,260,260,,260,260',
',258,247,247,,260,247,,247,,,,105,105,,,105,105,105,,,,241,241,247,',
'241,,241,,,,,,105,247,,,,247,247,,,247,241,105,,247,247,105,105,247',
',105,247,241,,105,105,241,241,105,247,241,105,,,241,241,84,84,241,105',
'84,241,84,,,,85,85,,241,85,,85,,,,235,235,84,84,235,,235,,,,,,85,84',
',,,84,84,,,84,235,85,,84,84,85,85,84,,85,84,235,,85,85,235,235,85,84',
'235,85,,,235,235,232,232,235,85,232,235,232,,,,221,221,,235,221,,221',
',,,220,220,232,,220,,220,,,,,,221,232,,,,232,232,,,232,220,221,,232',
'232,221,221,232,,221,232,220,,221,221,220,220,221,232,220,221,,,220',
'220,104,104,220,221,104,220,104,,,,93,93,,220,93,93,93,,,,210,210,104',
',,,,,,,,,93,104,,,,104,104,,,104,,93,,104,104,93,93,104,,93,104,210',
',93,93,210,210,93,104,210,93,,,210,,187,187,210,93,187,,187,,,,103,103',
',210,103,,103,,,,185,185,187,,185,,185,,,,,,103,187,,,,187,187,,,187',
'185,103,,187,187,103,103,187,,103,187,185,,103,103,185,185,103,187,185',
'103,,,185,185,180,180,185,103,180,185,180,,,107,,,,185,,,,,107,107,',
',180,,,,,107,107,107,107,,,180,,,,180,180,,,180,,,,180,180,,,180,107',
'107,180,,107,107,107,107,107,107,180,107,107,111,,,,,107,,,,111,111',
',,,,,,,111,111,111,111,,,121,121,,,,,,,121,121,121,121,121,,,,,111,111',
',,111,111,111,111,111,111,,111,111,,,121,121,,111,121,121,121,121,121',
'121,,121,121,351,351,,,,121,,,,351,351,351,351,,,276,276,,,,,,,,276',
'276,276,276,,,,,351,351,,,351,351,351,351,351,351,,351,351,,,,276,,351',
'276,276,276,276,276,276,,276,276,353,353,,,,276,,,,353,353,353,353,',
',140,140,,,,,,,,140,140,140,140,,,,,353,353,,,353,353,353,353,353,353',
',353,353,,,140,140,,353,140,140,140,140,140,140,,140,140,279,279,,,',
'140,,,,279,279,279,279,,,316,316,,,,,,,,316,316,316,316,,,,,,,,,279',
'279,279,279,279,279,,279,279,,,316,316,,279,316,316,316,316,316,316',
',316,316,313,313,,,,316,,,,313,313,313,313,,,339,339,,,,,,,,339,339',
'339,339,,,,,313,313,,,313,313,313,313,313,313,,313,313,,,339,339,,313',
'339,339,339,339,339,339,,339,339,123,123,,,,339,,,,123,123,123,123,',
',309,309,,,,,,,,309,309,309,309,,,,,123,123,,,123,123,123,123,123,123',
',123,123,,,,,,123,309,309,309,309,309,309,,309,309,125,125,,,,309,,',
',125,125,125,125,,,323,323,,,,,,,,323,323,323,323,,,,,125,125,,,125',
'125,125,125,125,125,,125,125,,,323,323,,125,323,323,323,323,323,323',
',323,323,167,167,,,,323,,,167,167,167,167,167,,,308,308,,,,,,,,308,308',
'308,308,,,,,167,167,,,167,167,167,167,167,167,,167,167,,,,,,167,308',
'308,308,308,308,308,,308,308,124,124,,,,308,,,,124,124,124,124,,,,283',
',,,,,,,283,,,,,,,,124,124,281,,124,124,124,124,124,124,281,124,124,',
',,,280,124,283,283,283,283,283,283,280,283,283,,,,,,283,,277,,281,281',
'281,281,281,281,277,281,281,,,,,,281,280,280,280,280,280,280,285,280',
'280,,,,,,280,,,,277,277,277,277,277,277,22,277,277,,,,,,277,,,285,,285',
'285,,285,285,317,285,,285,,285,,285,317,,285,22,,22,22,,22,22,186,22',
',22,,22,,22,186,,22,317,,317,317,,317,317,243,317,,317,,317,,317,243',
',317,186,,186,186,,186,186,212,186,,186,,186,,186,212,,186,243,,243',
'243,,243,243,357,243,,243,,243,,243,357,,243,212,,212,212,,212,212,366',
'212,,212,,212,,212,366,,212,357,,357,357,,357,357,369,357,,357,,357',
',357,369,,357,366,,366,366,,366,366,0,366,,366,,366,,366,,,366,369,',
'369,369,,369,369,307,369,,369,,369,,369,307,,369,0,,0,0,,0,0,,0,,0,',
'0,,0,,,0,307,,307,307,,307,307,,307,,307,,307,,307,,,307,284,284,284',
'284,284,284,,284,284,,,,,,284,275,275,275,275,275,275,,275,275,,,,,',
'275' ]
        racc_action_check = arr = Array.new(2232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2135,   427,   nil,   519,   117,   370,   385,   nil,   384,   448,
   nil,   382,   235,    66,   nil,   nil,    59,   354,   nil,   361,
   181,   nil,  1991,   129,   nil,   nil,   nil,   nil,   330,   nil,
   355,   339,   nil,   574,   429,   nil,   nil,   nil,   nil,   329,
   nil,   nil,   315,   nil,   nil,   nil,    85,   nil,   nil,   496,
   -22,   553,   563,   573,   620,    58,   128,   279,   697,   240,
   250,   232,   269,   258,   nil,   nil,   nil,   nil,    -6,   nil,
   nil,   nil,   nil,   nil,   nil,   193,   nil,    -6,   171,   169,
   136,   149,   nil,   nil,  1062,  1072,    97,   nil,   179,   202,
   nil,   224,   248,  1206,   nil,   239,   nil,    13,   nil,   301,
   314,   795,   nil,  1273,  1196,  1005,   nil,  1333,     1,   nil,
   870,  1387,   353,   356,    95,   nil,   nil,   nil,   nil,   370,
   nil,  1402,   nil,  1687,  1867,  1747,   735,   nil,     2,   nil,
    70,   nil,   nil,   -15,   nil,   nil,   nil,   150,   344,   314,
  1522,   379,   nil,   393,   373,   nil,   412,   nil,   nil,    -9,
   nil,    45,   420,    -1,   nil,   nil,    97,   nil,    -5,   175,
    30,    77,   289,   nil,    94,   141,   nil,  1807,   nil,   264,
   205,   230,   255,   280,   305,   372,   419,   687,   770,   310,
  1330,   820,   845,   281,   895,  1283,  2027,  1263,   nil,   307,
   nil,   nil,   nil,   326,   293,   291,   nil,   287,   nil,   277,
   nil,   270,   nil,   nil,   285,   nil,   nil,    80,   262,   223,
  1216,   nil,  2063,   240,   222,    64,   224,   nil,   226,   nil,
  1149,  1139,   -20,   nil,   nil,   nil,    66,   nil,   111,   nil,
   nil,   nil,  1129,     0,    59,  1082,   107,   131,   nil,    96,
   129,  1015,   nil,  2045,   nil,   145,   nil,   995,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   nil,   nil,   161,   934,   nil,
   933,   nil,   197,   322,   nil,   115,   339,   nil,   nil,   710,
   182,   322,   nil,   463,   653,  2163,  1462,  1933,   nil,  1567,
  1915,  1900,   nil,  1882,  2148,  1973,   280,    26,   719,   640,
     6,   nil,   296,   270,   303,   630,   506,   nil,    46,   nil,
   313,   nil,   486,   nil,   -24,   nil,   439,  2153,  1822,  1702,
   nil,   nil,   340,  1627,   nil,   nil,  1582,  2009,   nil,   nil,
   nil,   nil,   nil,  1762,   357,   nil,   nil,   nil,   184,   nil,
   388,   nil,   nil,   nil,   nil,   337,   158,   385,   nil,  1642,
   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   111,   397,
   nil,  1447,   nil,  1507,   404,   nil,   nil,  2081,   nil,   nil,
   nil,   407,   409,    24,   nil,   nil,  2099,   nil,   nil,  2117,
   nil,   nil,   nil,   nil,   421,   nil,   424,   nil,   nil,   nil ]

racc_action_default = [
  -183,  -220,   -19,    -8,  -220,   -54,   -20,    -9,  -220,  -220,
   -10,  -220,  -220,  -220,   -11,  -173,  -175,   -24,   -12,  -220,
  -220,   -13,    -1,  -220,   -14,    -2,   -15,    -3,  -174,   -16,
  -220,  -220,   -17,    -6,  -220,   -18,    -7,  -163,  -164,  -166,
  -175,  -174,  -183,   -55,   -28,   -29,  -220,   -26,   -27,  -220,
  -220,  -220,  -220,  -220,  -220,  -183,  -183,   -57,  -220,   -89,
  -183,   -96,  -220,  -220,   -53,    -4,  -181,  -182,  -183,  -180,
  -176,  -178,  -208,  -179,  -161,   -39,  -162,   -40,   -41,  -200,
  -218,  -220,  -101,   -42,  -220,  -220,   -78,   -46,   -43,  -220,
   -44,   -45,   -33,  -220,  -106,   -47,   -34,   -77,   -76,   -48,
   -38,  -220,  -117,  -220,  -220,  -220,  -116,  -220,  -220,  -109,
   -89,  -220,  -220,  -220,  -184,  -185,   -25,   -22,   -24,  -174,
   -23,  -220,   -21,   -87,   -86,   -88,  -220,   -70,  -220,  -200,
  -183,   -69,   -60,  -220,   -77,   -61,   -63,  -220,   -96,  -220,
   -36,  -206,   -90,  -220,  -183,   -94,  -206,   -95,   -97,  -220,
   380,  -220,  -220,  -220,  -194,   -32,  -220,  -102,  -220,  -220,
  -220,  -220,  -220,  -203,  -220,  -220,  -127,  -220,  -134,  -220,
  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,
  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -212,  -220,
  -215,  -216,  -211,  -220,   -80,   -81,   -72,  -206,  -158,  -220,
   -82,   -83,   -78,   -84,   -85,  -157,  -159,   -77,   -79,   -74,
  -220,  -165,  -220,  -193,  -220,  -220,  -191,  -188,  -220,  -217,
  -220,  -220,  -220,   -59,   -66,   -65,  -220,   -58,  -206,  -204,
  -205,  -108,  -220,  -207,  -220,  -220,  -220,  -220,  -196,  -207,
  -220,  -220,  -177,  -220,  -195,  -205,   -30,  -220,  -104,  -103,
  -153,  -154,  -160,  -156,  -220,  -147,  -148,   -77,  -220,  -155,
  -220,   -35,  -205,  -201,  -100,  -220,  -220,  -137,  -201,  -122,
  -124,  -123,  -118,  -125,  -126,  -129,  -136,  -131,  -119,  -135,
  -133,  -130,  -120,  -132,  -128,    -5,  -220,  -112,  -121,  -220,
  -220,  -209,  -220,   -89,  -220,   -75,  -220,  -141,  -220,  -145,
  -220,  -168,  -220,  -186,  -220,  -187,  -220,  -220,   -67,   -68,
   -64,   -62,  -220,   -37,   -91,   -51,   -92,  -220,  -199,  -198,
  -197,   -98,   -52,   -93,  -220,  -172,   -31,  -105,  -220,  -150,
  -206,  -219,  -202,   -99,  -107,  -112,  -220,  -220,  -111,  -214,
  -213,  -210,   -50,  -206,   -49,   -73,  -142,  -140,  -220,  -220,
  -167,  -192,  -189,  -190,  -220,  -139,   -56,  -220,  -170,  -171,
  -152,  -205,  -220,  -220,  -110,  -113,  -220,   -71,  -146,  -220,
  -138,  -169,  -149,  -151,  -220,  -115,  -220,  -144,  -114,  -143 ]

racc_goto_table = [
    11,    17,    65,    22,   109,   127,   127,    13,   131,   131,
   217,    96,   204,   141,   188,   286,    38,   196,   157,   191,
    42,   208,    11,    17,   200,   256,    70,    63,   234,    13,
   206,   297,    60,   240,   146,   254,    46,   338,   113,    50,
   198,   300,   205,   139,   294,    25,   195,   118,   203,   296,
   249,   118,   321,    13,   133,   137,   144,    13,   255,   311,
   194,   116,   145,   201,   197,   116,    64,   117,   330,   156,
   259,   122,   324,    57,    39,    92,   236,    68,   162,   206,
   127,   152,   363,   131,   292,   364,   299,   115,   244,   198,
   169,   205,   120,   214,   215,   251,   120,   209,   320,   193,
    19,   nil,   nil,   nil,   nil,   115,   nil,    67,   nil,   250,
   nil,   228,   253,   154,   nil,   312,   nil,   346,   nil,   nil,
   nil,   259,   nil,   nil,   329,   nil,   nil,   211,   nil,   222,
   206,   nil,   nil,   nil,   254,   nil,   354,   nil,   nil,   145,
   198,   nil,   205,   nil,   261,   nil,   251,   nil,   nil,   265,
   266,   nil,   nil,   nil,   242,   nil,   nil,   nil,   nil,   252,
   250,   nil,   nil,   253,   nil,   nil,   nil,   nil,   nil,   259,
   nil,   nil,   299,   nil,   nil,   nil,   127,   nil,   206,   131,
   327,   nil,   nil,   nil,   nil,   nil,    11,    17,   198,   238,
   205,   nil,   nil,    13,   251,   374,   340,   204,   376,   107,
   352,   191,   345,   111,   nil,   nil,   208,   259,   250,   200,
   252,   253,    11,    17,   nil,   206,   206,   362,   121,    13,
   123,   124,   125,   126,   368,   198,   198,   205,   205,   373,
   367,   195,   251,   203,   314,    67,   nil,    67,   nil,   254,
   145,   nil,   nil,    11,    17,   194,   250,   343,   201,   253,
    13,   nil,   nil,   319,   158,   nil,   nil,   nil,   252,   259,
   nil,   nil,   nil,   278,   nil,    65,   nil,   282,   206,   nil,
   166,   nil,   167,   168,   259,   nil,   nil,   nil,   198,   nil,
   205,   nil,   nil,   206,   251,    11,    17,   nil,   nil,   nil,
   nil,   nil,    13,   198,   nil,   205,   252,   nil,   250,   251,
   nil,   253,   nil,   nil,   nil,   nil,   nil,    11,    17,   nil,
   365,   360,   nil,   250,    13,   nil,   253,    11,    17,   nil,
   357,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   260,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   252,   279,
   280,   281,   nil,   283,   284,   nil,   288,    11,    17,   nil,
   nil,   nil,   nil,   252,    13,   nil,    11,    17,   nil,    11,
    17,   nil,   nil,    13,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   308,
   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   313,   nil,   nil,   316,   nil,   nil,   nil,   nil,   nil,
   323,   nil,   nil,   nil,   nil,   nil,   158,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   351,   nil,   nil,   nil,   353,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   107 ]

racc_goto_check = [
    55,    23,     4,     2,    61,    30,    30,    44,    34,    34,
    82,    26,    36,    42,    85,     5,    72,    53,    59,    29,
    39,    29,    55,    23,    33,    70,    78,    44,    43,    44,
    38,    66,    39,    43,    45,    68,    22,    62,    74,    22,
    32,     5,    37,    24,    41,     3,    31,    23,    35,    65,
    60,    23,    58,    44,    48,    48,    74,    44,    69,    49,
    30,     8,    56,    34,    42,     8,     6,    21,    71,    24,
    29,    21,     5,    47,    73,    25,    75,    76,    24,    38,
    30,    77,    28,    34,    43,    62,    68,     3,    79,    32,
    24,    37,     6,    80,    81,    31,     6,    40,    83,    84,
     1,   nil,   nil,   nil,   nil,     3,   nil,    64,   nil,    30,
   nil,    45,    34,     3,   nil,    43,   nil,    66,   nil,   nil,
   nil,    29,   nil,   nil,    70,   nil,   nil,    72,   nil,    48,
    38,   nil,   nil,   nil,    68,   nil,     5,   nil,   nil,    56,
    32,   nil,    37,   nil,    26,   nil,    31,   nil,   nil,    24,
    24,   nil,   nil,   nil,    78,   nil,   nil,   nil,   nil,    55,
    30,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,    68,   nil,   nil,   nil,    30,   nil,    38,    34,
    59,   nil,   nil,   nil,   nil,   nil,    55,    23,    32,     3,
    37,   nil,   nil,    44,    31,     5,    85,    36,     5,    27,
    82,    29,    53,    27,   nil,   nil,    29,    29,    30,    33,
    55,    34,    55,    23,   nil,    38,    38,    43,    27,    44,
    27,    27,    27,    27,    68,    32,    32,    37,    37,    70,
    43,    31,    31,    35,    56,    64,   nil,    64,   nil,    68,
    56,   nil,   nil,    55,    23,    30,    30,    42,    34,    34,
    44,   nil,   nil,    39,    27,   nil,   nil,   nil,    55,    29,
   nil,   nil,   nil,    64,   nil,     4,   nil,    64,    38,   nil,
    27,   nil,    27,    27,    29,   nil,   nil,   nil,    32,   nil,
    37,   nil,   nil,    38,    31,    55,    23,   nil,   nil,   nil,
   nil,   nil,    44,    32,   nil,    37,    55,   nil,    30,    31,
   nil,    34,   nil,   nil,   nil,   nil,   nil,    55,    23,   nil,
    61,    26,   nil,    30,    44,   nil,    34,    55,    23,   nil,
     2,   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    55,    27,
    27,    27,   nil,    27,    27,   nil,    27,    55,    23,   nil,
   nil,   nil,   nil,    55,    44,   nil,    55,    23,   nil,    55,
    23,   nil,   nil,    44,   nil,   nil,    44,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
    27,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27 ]

racc_goto_pointer = [
   nil,   100,     3,    45,   -20,  -171,    46,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,    30,     1,   -15,    47,   -17,   169,  -248,   -89,
   -50,   -64,   -70,   -86,   -47,   -62,   -98,   -68,   -80,    16,
   -13,  -165,   -46,  -113,     7,   -27,   nil,    60,    -1,  -167,
   nil,   nil,   nil,   -93,   nil,     0,     1,   nil,  -187,   -67,
  -108,   -26,  -250,   nil,    84,  -161,  -179,   nil,  -124,  -101,
  -134,  -190,    15,    73,    -4,   -68,    54,    13,     3,   -65,
   -21,   -20,  -104,  -139,    -9,   -94,   nil ]

racc_goto_default = [
   nil,   nil,   285,   132,    27,   nil,    33,    36,     3,     7,
    10,    14,    18,    21,    24,    26,    29,    32,    35,     2,
     6,     9,   nil,    87,   nil,   nil,   106,   140,   232,   100,
    75,    77,    78,    83,    88,    90,    91,    95,    99,    31,
   nil,   nil,   nil,   nil,    81,   nil,    20,   nil,   nil,   135,
   226,   136,   128,   nil,   199,    80,   142,   147,   148,   nil,
   nil,   nil,   nil,   102,    76,   nil,   nil,   298,    89,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,
   nil,   nil,   nil,   nil,   nil,   nil,   189 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  4, 83, :_reduce_30,
  5, 83, :_reduce_31,
  3, 83, :_reduce_32,
  2, 83, :_reduce_33,
  1, 94, :_reduce_34,
  3, 94, :_reduce_35,
  1, 93, :_reduce_36,
  3, 93, :_reduce_37,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  5, 75, :_reduce_49,
  5, 75, :_reduce_50,
  5, 75, :_reduce_51,
  5, 87, :_reduce_52,
  2, 76, :_reduce_53,
  1, 115, :_reduce_54,
  2, 115, :_reduce_55,
  6, 77, :_reduce_56,
  2, 77, :_reduce_57,
  3, 116, :_reduce_58,
  3, 116, :_reduce_59,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_62,
  1, 118, :_reduce_none,
  3, 118, :_reduce_64,
  1, 119, :_reduce_65,
  1, 119, :_reduce_66,
  3, 120, :_reduce_67,
  3, 120, :_reduce_68,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_71,
  1, 109, :_reduce_72,
  3, 109, :_reduce_73,
  0, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 107, :_reduce_76,
  1, 99, :_reduce_77,
  1, 100, :_reduce_78,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 78, :_reduce_86,
  3, 78, :_reduce_87,
  3, 88, :_reduce_88,
  0, 111, :_reduce_89,
  1, 111, :_reduce_90,
  3, 111, :_reduce_91,
  3, 125, :_reduce_92,
  3, 126, :_reduce_93,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  0, 114, :_reduce_96,
  1, 114, :_reduce_97,
  3, 114, :_reduce_98,
  4, 106, :_reduce_99,
  3, 106, :_reduce_100,
  1, 98, :_reduce_101,
  2, 98, :_reduce_102,
  2, 128, :_reduce_103,
  1, 129, :_reduce_104,
  2, 129, :_reduce_105,
  1, 101, :_reduce_106,
  4, 92, :_reduce_107,
  4, 92, :_reduce_108,
  2, 81, :_reduce_109,
  5, 130, :_reduce_110,
  4, 130, :_reduce_111,
  0, 131, :_reduce_none,
  2, 131, :_reduce_113,
  4, 131, :_reduce_114,
  3, 131, :_reduce_115,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 96, :_reduce_118,
  3, 96, :_reduce_119,
  3, 96, :_reduce_120,
  3, 96, :_reduce_121,
  3, 96, :_reduce_122,
  3, 96, :_reduce_123,
  3, 96, :_reduce_124,
  3, 96, :_reduce_125,
  3, 96, :_reduce_126,
  2, 96, :_reduce_127,
  3, 96, :_reduce_128,
  3, 96, :_reduce_129,
  3, 96, :_reduce_130,
  3, 96, :_reduce_131,
  3, 96, :_reduce_132,
  3, 96, :_reduce_133,
  2, 96, :_reduce_134,
  3, 96, :_reduce_135,
  3, 96, :_reduce_136,
  3, 96, :_reduce_137,
  7, 80, :_reduce_138,
  6, 80, :_reduce_139,
  5, 79, :_reduce_140,
  1, 134, :_reduce_141,
  2, 134, :_reduce_142,
  5, 135, :_reduce_143,
  4, 135, :_reduce_144,
  1, 136, :_reduce_145,
  3, 136, :_reduce_146,
  3, 102, :_reduce_147,
  1, 138, :_reduce_none,
  4, 138, :_reduce_149,
  1, 140, :_reduce_none,
  3, 140, :_reduce_151,
  3, 139, :_reduce_152,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_161,
  1, 137, :_reduce_none,
  1, 141, :_reduce_163,
  1, 142, :_reduce_none,
  3, 142, :_reduce_165,
  2, 82, :_reduce_166,
  6, 84, :_reduce_167,
  5, 84, :_reduce_168,
  7, 85, :_reduce_169,
  6, 85, :_reduce_170,
  6, 86, :_reduce_171,
  5, 86, :_reduce_172,
  1, 113, :_reduce_173,
  1, 108, :_reduce_174,
  1, 108, :_reduce_175,
  1, 145, :_reduce_176,
  3, 145, :_reduce_177,
  1, 147, :_reduce_178,
  1, 148, :_reduce_179,
  1, 148, :_reduce_180,
  1, 148, :_reduce_181,
  1, 148, :_reduce_none,
  0, 72, :_reduce_183,
  0, 149, :_reduce_184,
  1, 143, :_reduce_none,
  3, 143, :_reduce_186,
  3, 143, :_reduce_187,
  1, 150, :_reduce_none,
  3, 150, :_reduce_189,
  3, 151, :_reduce_190,
  1, 151, :_reduce_191,
  3, 151, :_reduce_192,
  1, 151, :_reduce_193,
  1, 146, :_reduce_none,
  2, 146, :_reduce_195,
  1, 144, :_reduce_none,
  2, 144, :_reduce_197,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 103, :_reduce_200,
  3, 104, :_reduce_201,
  4, 104, :_reduce_202,
  2, 104, :_reduce_203,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  0, 112, :_reduce_none,
  1, 112, :_reduce_207,
  1, 133, :_reduce_208,
  3, 132, :_reduce_209,
  4, 132, :_reduce_210,
  2, 132, :_reduce_211,
  1, 153, :_reduce_none,
  3, 153, :_reduce_213,
  3, 154, :_reduce_214,
  1, 155, :_reduce_215,
  1, 155, :_reduce_216,
  4, 124, :_reduce_217,
  1, 105, :_reduce_none,
  4, 105, :_reduce_219 ]

racc_reduce_n = 220

racc_shift_n = 380

racc_token_table = {
  false => 0,
  :error => 1,
  :FOREACH => 2,
  :STRING => 3,
  :DQPRE => 4,
  :DQMID => 5,
  :DQPOST => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :IMPORT => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FOREACH",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "foreachstatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "quotedtext",
  "name",
  "type",
  "boolean",
  "selector",
  "variable",
  "array",
  "hasharrayaccesses",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 35)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 38)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 47)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 74)
  def _reduce_21(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 77)
  def _reduce_22(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

module_eval(<<'.,.,', 'grammar.ra', 85)
  def _reduce_30(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_31(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 98)
  def _reduce_32(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 105)
  def _reduce_33(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 112)
  def _reduce_34(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 115)
  def _reduce_35(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 119)
  def _reduce_36(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_37(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

module_eval(<<'.,.,', 'grammar.ra', 135)
  def _reduce_49(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 138)
  def _reduce_50(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_51(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 148)
  def _reduce_52(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 155)
  def _reduce_53(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_54(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_55(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_56(val, _values, result)
      @lexer.commentpop
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 196)
  def _reduce_57(val, _values, result)
        if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_58(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 225)
  def _reduce_59(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'grammar.ra', 238)
  def _reduce_62(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_64(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 247)
  def _reduce_65(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 248)
  def _reduce_66(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_67(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_68(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_71(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 268)
  def _reduce_72(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_73(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'grammar.ra', 278)
  def _reduce_76(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 282)
  def _reduce_77(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_78(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'grammar.ra', 298)
  def _reduce_86(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_87(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 308)
  def _reduce_88(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 314)
  def _reduce_89(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_90(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_91(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_93(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_96(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 338)
  def _reduce_97(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 340)
  def _reduce_98(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_99(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 351)
  def _reduce_100(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_101(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_102(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_103(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_104(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_105(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 366)
  def _reduce_106(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_107(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_108(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 377)
  def _reduce_109(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_110(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_111(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'grammar.ra', 405)
  def _reduce_113(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_114(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 412)
  def _reduce_115(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'grammar.ra', 431)
  def _reduce_118(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_119(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 437)
  def _reduce_120(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 440)
  def _reduce_121(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 443)
  def _reduce_122(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_123(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_124(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_125(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 455)
  def _reduce_126(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 458)
  def _reduce_127(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 461)
  def _reduce_128(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 464)
  def _reduce_129(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 467)
  def _reduce_130(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 470)
  def _reduce_131(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 473)
  def _reduce_132(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 476)
  def _reduce_133(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 479)
  def _reduce_134(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 482)
  def _reduce_135(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 485)
  def _reduce_136(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 488)
  def _reduce_137(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_138(val, _values, result)
      @lexer.commentpop
  result = ast AST::ForeachStatement, :data => val[2], :statements => val[5]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 494)
  def _reduce_139(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 497)
  def _reduce_140(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_141(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 503)
  def _reduce_142(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_143(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_144(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_145(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_146(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_147(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_149(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_151(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_152(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'grammar.ra', 560)
  def _reduce_161(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 565)
  def _reduce_163(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_165(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 570)
  def _reduce_166(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 580)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_168(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_169(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_170(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 612)
  def _reduce_171(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 617)
  def _reduce_172(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 621)
  def _reduce_173(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_174(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 624)
  def _reduce_175(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 629)
  def _reduce_176(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 632)
  def _reduce_177(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 637)
  def _reduce_178(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_179(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_180(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_181(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 182 omitted

module_eval(<<'.,.,', 'grammar.ra', 646)
  def _reduce_183(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_184(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_186(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_187(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_189(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_190(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_191(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_192(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_193(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_195(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_197(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_200(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_201(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_202(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_203(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 709)
  def _reduce_208(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_209(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_210(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_211(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_213(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_214(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_215(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_216(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_217(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_219(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
